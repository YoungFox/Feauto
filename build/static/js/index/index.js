webpackJsonp([0,5],[function(e,t,n){(function(e){"use strict";n(4);var t=(n(8),!1);e(window).on("click",function(){n.e(1,function(){var e=n(18);t||(t=new e,t.init())})});var r=n(9),i=new r("我是banner");i.ini();var o=n(13),a=new o;a.ini(),console.log("index/index")}).call(t,n(1))},function(e,t,n){var r,i;(function(e){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};!function(t,n){"object"==o(e)&&"object"==o(e.exports)?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:void 0,function(a,s){function u(e){var t="length"in e&&e.length,n=ce.type(e);return"function"!==n&&!ce.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e))}function l(e,t,n){if(ce.isFunction(t))return ce.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return ce.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(ye.test(t))return ce.filter(t,e,n);t=ce.filter(t,e)}return ce.grep(e,function(e){return ce.inArray(e,t)>=0!==n})}function c(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function f(e){var t=ke[e]={};return ce.each(e.match(Ee)||[],function(e,n){t[n]=!0}),t}function d(){xe.addEventListener?(xe.removeEventListener("DOMContentLoaded",p,!1),a.removeEventListener("load",p,!1)):(xe.detachEvent("onreadystatechange",p),a.detachEvent("onload",p))}function p(){(xe.addEventListener||"load"===event.type||"complete"===xe.readyState)&&(d(),ce.ready())}function h(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(De,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:je.test(n)?ce.parseJSON(n):n)}catch(i){}ce.data(e,t,n)}else n=void 0}return n}function m(e){var t;for(t in e)if(("data"!==t||!ce.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function g(e,t,n,r){if(ce.acceptData(e)){var i,a,s=ce.expando,u=e.nodeType,l=u?ce.cache:e,c=u?e[s]:e[s]&&s;if(c&&l[c]&&(r||l[c].data)||void 0!==n||"string"!=typeof t)return c||(c=u?e[s]=ee.pop()||ce.guid++:s),l[c]||(l[c]=u?{}:{toJSON:ce.noop}),"object"!=("undefined"==typeof t?"undefined":o(t))&&"function"!=typeof t||(r?l[c]=ce.extend(l[c],t):l[c].data=ce.extend(l[c].data,t)),a=l[c],r||(a.data||(a.data={}),a=a.data),void 0!==n&&(a[ce.camelCase(t)]=n),"string"==typeof t?(i=a[t],null==i&&(i=a[ce.camelCase(t)])):i=a,i}}function v(e,t,n){if(ce.acceptData(e)){var r,i,o=e.nodeType,a=o?ce.cache:e,s=o?e[ce.expando]:ce.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){ce.isArray(t)?t=t.concat(ce.map(t,ce.camelCase)):t in r?t=[t]:(t=ce.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!m(r):!ce.isEmptyObject(r))return}(n||(delete a[s].data,m(a[s])))&&(o?ce.cleanData([e],!0):ue.deleteExpando||a!=a.window?delete a[s]:a[s]=null)}}}function y(){return!0}function b(){return!1}function x(){try{return xe.activeElement}catch(e){}}function w(e){var t=We.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function T(e,t){var n,r,i=0,a=o(e.getElementsByTagName)!==Le?e.getElementsByTagName(t||"*"):o(e.querySelectorAll)!==Le?e.querySelectorAll(t||"*"):void 0;if(!a)for(a=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||ce.nodeName(r,t)?a.push(r):ce.merge(a,T(r,t));return void 0===t||t&&ce.nodeName(e,t)?ce.merge([e],a):a}function C(e){Oe.test(e.type)&&(e.defaultChecked=e.checked)}function N(e,t){return ce.nodeName(e,"table")&&ce.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function E(e){return e.type=(null!==ce.find.attr(e,"type"))+"/"+e.type,e}function k(e){var t=Ze.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function S(e,t){for(var n,r=0;null!=(n=e[r]);r++)ce._data(n,"globalEval",!t||ce._data(t[r],"globalEval"))}function A(e,t){if(1===t.nodeType&&ce.hasData(e)){var n,r,i,o=ce._data(e),a=ce._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;r<i;r++)ce.event.add(t,n,s[n][r])}a.data&&(a.data=ce.extend({},a.data))}}function L(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!ue.noCloneEvent&&t[ce.expando]){i=ce._data(t);for(r in i.events)ce.removeEvent(t,r,i.handle);t.removeAttribute(ce.expando)}"script"===n&&t.text!==e.text?(E(t).text=e.text,k(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),ue.html5Clone&&e.innerHTML&&!ce.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Oe.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function j(e,t){var n,r=ce(t.createElement(e)).appendTo(t.body),i=a.getDefaultComputedStyle&&(n=a.getDefaultComputedStyle(r[0]))?n.display:ce.css(r[0],"display");return r.detach(),i}function D(e){var t=xe,n=ot[e];return n||(n=j(e,t),"none"!==n&&n||(it=(it||ce("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(it[0].contentWindow||it[0].contentDocument).document,t.write(),t.close(),n=j(e,t),it.detach()),ot[e]=n),n}function H(e,t){return{get:function(){var n=e();if(null!=n)return n?void delete this.get:(this.get=t).apply(this,arguments)}}}function _(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=yt.length;i--;)if(t=yt[i]+n,t in e)return t;return r}function M(e,t){for(var n,r,i,o=[],a=0,s=e.length;a<s;a++)r=e[a],r.style&&(o[a]=ce._data(r,"olddisplay"),n=r.style.display,t?(!o[a]&&"none"===n&&(r.style.display=""),""===r.style.display&&Me(r)&&(o[a]=ce._data(r,"olddisplay",D(r.nodeName)))):(i=Me(r),(n&&"none"!==n||!i)&&ce._data(r,"olddisplay",i?n:ce.css(r,"display"))));for(a=0;a<s;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function q(e,t,n){var r=ht.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function O(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;o<4;o+=2)"margin"===n&&(a+=ce.css(e,n+_e[o],!0,i)),r?("content"===n&&(a-=ce.css(e,"padding"+_e[o],!0,i)),"margin"!==n&&(a-=ce.css(e,"border"+_e[o]+"Width",!0,i))):(a+=ce.css(e,"padding"+_e[o],!0,i),"padding"!==n&&(a+=ce.css(e,"border"+_e[o]+"Width",!0,i)));return a}function F(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=at(e),a=ue.boxSizing&&"border-box"===ce.css(e,"boxSizing",!1,o);if(i<=0||null==i){if(i=st(e,t,o),(i<0||null==i)&&(i=e.style[t]),lt.test(i))return i;r=a&&(ue.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+O(e,t,n||(a?"border":"content"),r,o)+"px"}function R(e,t,n,r,i){return new R.prototype.init(e,t,n,r,i)}function B(){return setTimeout(function(){bt=void 0}),bt=ce.now()}function P(e,t){var n,r={height:e},i=0;for(t=t?1:0;i<4;i+=2-t)n=_e[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function $(e,t,n){for(var r,i=(Et[t]||[]).concat(Et["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function W(e,t,n){var r,i,o,a,s,u,l,c,f=this,d={},p=e.style,h=e.nodeType&&Me(e),m=ce._data(e,"fxshow");n.queue||(s=ce._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,ce.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],l=ce.css(e,"display"),c="none"===l?ce._data(e,"olddisplay")||D(e.nodeName):l,"inline"===c&&"none"===ce.css(e,"float")&&(ue.inlineBlockNeedsLayout&&"inline"!==D(e.nodeName)?p.zoom=1:p.display="inline-block")),n.overflow&&(p.overflow="hidden",ue.shrinkWrapBlocks()||f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;h=!0}d[r]=m&&m[r]||ce.style(e,r)}else l=void 0;if(ce.isEmptyObject(d))"inline"===("none"===l?D(e.nodeName):l)&&(p.display=l);else{m?"hidden"in m&&(h=m.hidden):m=ce._data(e,"fxshow",{}),o&&(m.hidden=!h),h?ce(e).show():f.done(function(){ce(e).hide()}),f.done(function(){var t;ce._removeData(e,"fxshow");for(t in d)ce.style(e,t,d[t])});for(r in d)a=$(h?m[r]:0,r,f),r in m||(m[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function z(e,t){var n,r,i,o,a;for(n in e)if(r=ce.camelCase(n),i=t[r],o=e[n],ce.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=ce.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function I(e,t,n){var r,i,o=0,a=Nt.length,s=ce.Deferred().always(function(){delete u.elem}),u=function f(){if(i)return!1;for(var t=bt||B(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,a=0,f=l.tweens.length;a<f;a++)l.tweens[a].run(o);return s.notifyWith(e,[l,o,n]),o<1&&f?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:ce.extend({},t),opts:ce.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:bt||B(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ce.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?s.resolveWith(e,[l,t]):s.rejectWith(e,[l,t]),this}}),c=l.props;for(z(c,l.opts.specialEasing);o<a;o++)if(r=Nt[o].call(l,e,c,l.opts))return r;return ce.map(c,$,l),ce.isFunction(l.opts.start)&&l.opts.start.call(e,l),ce.fx.timer(ce.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Ee)||[];if(ce.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function U(e,t,n,r){function i(s){var u;return o[s]=!0,ce.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(t.dataTypes.unshift(l),i(l),!1)}),u}var o={},a=e===Yt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function V(e,t){var n,r,i=ce.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&ce.extend(!0,e,n),e}function J(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in s)if(s[a]&&s[a].test(i)){u.unshift(a);break}if(u[0]in n)o=u[0];else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){o=a;break}r||(r=a)}o=o||r}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Y(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift(),o)if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=l[u+" "+o]||l["* "+o],!a)for(i in l)if(s=i.split(" "),s[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){a===!0?a=l[i]:l[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(f){return{state:"parsererror",error:a?f:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function G(e,t,n,r){var i;if(ce.isArray(t))ce.each(t,function(t,i){n||Zt.test(e)?r(e,i):G(e+"["+("object"==("undefined"==typeof i?"undefined":o(i))?t:"")+"]",i,n,r)});else if(n||"object"!==ce.type(t))r(e,t);else for(i in t)G(e+"["+i+"]",t[i],n,r)}function Q(){try{return new a.XMLHttpRequest}catch(e){}}function K(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function Z(e){return ce.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var ee=[],te=ee.slice,ne=ee.concat,re=ee.push,ie=ee.indexOf,oe={},ae=oe.toString,se=oe.hasOwnProperty,ue={},le="1.11.3",ce=function pn(e,t){return new pn.fn.init(e,t)},fe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,de=/^-ms-/,pe=/-([\da-z])/gi,he=function(e,t){return t.toUpperCase()};ce.fn=ce.prototype={jquery:le,constructor:ce,selector:"",length:0,toArray:function(){return te.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:te.call(this)},pushStack:function(e){var t=ce.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return ce.each(this,e,t)},map:function(e){return this.pushStack(ce.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(te.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:re,sort:ee.sort,splice:ee.splice},ce.extend=ce.fn.extend=function(){var e,t,n,r,i,a,s=arguments[0]||{},u=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[u]||{},u++),"object"!=("undefined"==typeof s?"undefined":o(s))&&!ce.isFunction(s)&&(s={}),u===l&&(s=this,u--);u<l;u++)if(null!=(i=arguments[u]))for(r in i)e=s[r],n=i[r],s!==n&&(c&&n&&(ce.isPlainObject(n)||(t=ce.isArray(n)))?(t?(t=!1,a=e&&ce.isArray(e)?e:[]):a=e&&ce.isPlainObject(e)?e:{},s[r]=ce.extend(c,a,n)):void 0!==n&&(s[r]=n));return s},ce.extend({expando:"jQuery"+(le+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===ce.type(e)},isArray:Array.isArray||function(e){return"array"===ce.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!ce.isArray(e)&&e-parseFloat(e)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==ce.type(e)||e.nodeType||ce.isWindow(e))return!1;try{if(e.constructor&&!se.call(e,"constructor")&&!se.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(ue.ownLast)for(t in e)return se.call(e,t);for(t in e);return void 0===t||se.call(e,t)},type:function(e){return null==e?e+"":"object"==("undefined"==typeof e?"undefined":o(e))||"function"==typeof e?oe[ae.call(e)]||"object":"undefined"==typeof e?"undefined":o(e)},globalEval:function(e){e&&ce.trim(e)&&(a.execScript||function(e){a.eval.call(a,e)})(e)},camelCase:function(e){return e.replace(de,"ms-").replace(pe,he)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,a=u(e);if(n){if(a)for(;i<o&&(r=t.apply(e[i],n),r!==!1);i++);else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(a)for(;i<o&&(r=t.call(e[i],i,e[i]),r!==!1);i++);else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(fe,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(u(Object(e))?ce.merge(n,"string"==typeof e?[e]:e):re.call(n,e)),n},inArray:function(e,t,n){var r;if(t){if(ie)return ie.call(t,e,n);for(r=t.length,n=n?n<0?Math.max(0,r+n):n:0;n<r;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,a=u(e),s=[];if(a)for(;i<o;i++)r=t(e[i],i,n),null!=r&&s.push(r);else for(i in e)r=t(e[i],i,n),null!=r&&s.push(r);return ne.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),ce.isFunction(e)?(n=te.call(arguments,2),r=function(){return e.apply(t||this,n.concat(te.call(arguments)))},r.guid=e.guid=e.guid||ce.guid++,r):void 0},now:function(){return+new Date},support:ue}),ce.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){oe["[object "+t+"]"]=t.toLowerCase()});var me=function(e){function t(e,t,n,r){var i,o,a,s,u,l,f,p,h,m;if((t?t.ownerDocument||t:P)!==H&&D(t),t=t||H,n=n||[],s=t.nodeType,"string"!=typeof e||!e||1!==s&&9!==s&&11!==s)return n;if(!r&&M){if(11!==s&&(i=ye.exec(e)))if(a=i[1]){if(9===s){if(o=t.getElementById(a),!o||!o.parentNode)return n;if(o.id===a)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&R(t,o)&&o.id===a)return n.push(o),n}else{if(i[2])return K.apply(n,t.getElementsByTagName(e)),n;if((a=i[3])&&w.getElementsByClassName)return K.apply(n,t.getElementsByClassName(a)),n}if(w.qsa&&(!q||!q.test(e))){if(p=f=B,h=t,m=1!==s&&e,1===s&&"object"!==t.nodeName.toLowerCase()){for(l=E(e),(f=t.getAttribute("id"))?p=f.replace(xe,"\\$&"):t.setAttribute("id",p),p="[id='"+p+"'] ",u=l.length;u--;)l[u]=p+d(l[u]);h=be.test(e)&&c(t.parentNode)||t,m=l.join(",")}if(m)try{return K.apply(n,h.querySelectorAll(m)),n}catch(g){}finally{f||t.removeAttribute("id")}}}return S(e.replace(ue,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>T.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[B]=!0,e}function i(e){var t=H.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=e.length;r--;)T.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function f(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function p(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=W++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,u,l=[$,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[B]||(t[B]={}),(s=u[r])&&s[0]===$&&s[1]===o)return l[2]=s[2];if(u[r]=l,l[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function v(e,t,n,i,o,a){return i&&!i[B]&&(i=v(i)),o&&!o[B]&&(o=v(o,a)),r(function(r,a,s,u){var l,c,f,d=[],p=[],h=a.length,v=r||m(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:g(v,d,e,s,u),b=n?o||(r?e:h||i)?[]:a:y;if(n&&n(y,b,s,u),i)for(l=g(b,p),i(l,[],s,u),c=l.length;c--;)(f=l[c])&&(b[p[c]]=!(y[p[c]]=f));if(r){if(o||e){if(o){for(l=[],c=b.length;c--;)(f=b[c])&&l.push(y[c]=f);o(null,b=[],l,u)}for(c=b.length;c--;)(f=b[c])&&(l=o?ee(r,f):d[c])>-1&&(r[l]=!(a[l]=f))}}else b=g(b===a?b.splice(h,b.length):b),o?o(null,a,b,u):K.apply(a,b)})}function y(e){for(var t,n,r,i=e.length,o=T.relative[e[0].type],a=o||T.relative[" "],s=o?1:0,u=p(function(e){return e===t},a,!0),l=p(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,i}];s<i;s++)if(n=T.relative[e[s].type])c=[p(h(c),n)];else{if(n=T.filter[e[s].type].apply(null,e[s].matches),n[B]){for(r=++s;r<i&&!T.relative[e[r].type];r++);return v(s>1&&h(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(ue,"$1"),n,s<r&&y(e.slice(s,r)),r<i&&y(e=e.slice(r)),r<i&&d(e))}c.push(n)}return h(c)}function b(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,l){var c,f,d,p=0,h="0",m=r&&[],v=[],y=A,b=r||o&&T.find.TAG("*",l),x=$+=null==y?1:Math.random()||.1,w=b.length;for(l&&(A=a!==H&&a);h!==w&&null!=(c=b[h]);h++){if(o&&c){for(f=0;d=e[f++];)if(d(c,a,s)){u.push(c);break}l&&($=x)}i&&((c=!d&&c)&&p--,r&&m.push(c))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(m,v,a,s);if(r){if(p>0)for(;h--;)!m[h]&&!v[h]&&(v[h]=G.call(u));v=g(v)}K.apply(u,v),l&&!r&&v.length>0&&p+n.length>1&&t.uniqueSort(u)}return l&&($=x,A=y),m};return i?r(a):a}var x,w,T,C,N,E,k,S,A,L,j,D,H,_,M,q,O,F,R,B="sizzle"+1*new Date,P=e.document,$=0,W=0,z=n(),I=n(),X=n(),U=function(e,t){return e===t&&(j=!0),0},V=1<<31,J={}.hasOwnProperty,Y=[],G=Y.pop,Q=Y.push,K=Y.push,Z=Y.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie=re.replace("w","w#"),oe="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",ae=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+oe+")*)|.*)\\)|)",se=new RegExp(ne+"+","g"),ue=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),fe=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(ae),pe=new RegExp("^"+ie+"$"),he={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re.replace("w","w*")+")"),ATTR:new RegExp("^"+oe),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},me=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,ve=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,be=/[+~]/,xe=/'|\\/g,we=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),Te=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},Ce=function(){D()};try{K.apply(Y=Z.call(P.childNodes),P.childNodes),Y[P.childNodes.length].nodeType}catch(Ne){K={apply:Y.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},N=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:P;return r!==H&&9===r.nodeType&&r.documentElement?(H=r,_=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),M=!N(r),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(r.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=ve.test(r.getElementsByClassName),w.getById=i(function(e){return _.appendChild(e).id=B,!r.getElementsByName||!r.getElementsByName(B).length}),w.getById?(T.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&M){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){return e.getAttribute("id")===t}}):(delete T.find.ID,T.filter.ID=function(e){var t=e.replace(we,Te);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),T.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},T.find.CLASS=w.getElementsByClassName&&function(e,t){if(M)return t.getElementsByClassName(e)},O=[],q=[],(w.qsa=ve.test(r.querySelectorAll))&&(i(function(e){_.appendChild(e).innerHTML="<a id='"+B+"'></a><select id='"+B+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||q.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+B+"-]").length||q.push("~="),e.querySelectorAll(":checked").length||q.push(":checked"),e.querySelectorAll("a#"+B+"+*").length||q.push(".#.+[+~]")}),i(function(e){var t=r.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&q.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),q.push(",.*:")})),(w.matchesSelector=ve.test(F=_.matches||_.webkitMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector||_.msMatchesSelector))&&i(function(e){w.disconnectedMatch=F.call(e,"div"),F.call(e,"[s!='']:x"),O.push("!=",ae)}),q=q.length&&new RegExp(q.join("|")),O=O.length&&new RegExp(O.join("|")),t=ve.test(_.compareDocumentPosition),R=t||ve.test(_.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!!r&&1===r.nodeType&&!!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===r||e.ownerDocument===P&&R(P,e)?-1:t===r||t.ownerDocument===P&&R(P,t)?1:L?ee(L,e)-ee(L,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,i=0,o=e.parentNode,s=t.parentNode,u=[e],l=[t];if(!o||!s)return e===r?-1:t===r?1:o?-1:s?1:L?ee(L,e)-ee(L,t):0;if(o===s)return a(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[i]===l[i];)i++;return i?a(u[i],l[i]):u[i]===P?-1:l[i]===P?1:0},r):H},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==H&&D(e),n=n.replace(fe,"='$1']"),w.matchesSelector&&M&&(!O||!O.test(n))&&(!q||!q.test(n)))try{var r=F.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,H,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==H&&D(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==H&&D(e);var n=T.attrHandle[t.toLowerCase()],r=n&&J.call(T.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==r?r:w.attributes||!M?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(j=!w.detectDuplicates,L=!w.sortStable&&e.slice(0),e.sort(U),j){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return L=null,e},C=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=C(t);return n},T=t.selectors={cacheLength:50,createPseudo:r,match:he,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,Te),e[3]=(e[3]||e[4]||e[5]||"").replace(we,Te),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return he.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=E(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,Te).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(se," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s;if(g){if(o){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(c=g[B]||(g[B]={}),l=c[e]||[],p=l[0]===$&&l[1],d=l[0]===$&&l[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(d=p=0)||h.pop();)if(1===f.nodeType&&++d&&f===t){c[e]=[$,p,d];break}}else if(y&&(l=(t[B]||(t[B]={}))[e])&&l[0]===$)d=l[1];else for(;(f=++p&&f&&f[m]||(d=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++d||(y&&((f[B]||(f[B]={}))[e]=[$,d]),f!==t)););return d-=i,d===r||d%r===0&&d/r>=0}}},PSEUDO:function(e,n){var i,o=T.pseudos[e]||T.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[B]?o(n):o.length>1?(i=[e,e,"",n],T.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(ue,"$1"));return i[B]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(we,Te),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,Te).toLowerCase(),function(t){var n;do if(n=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===_},focus:function(e){return e===H.activeElement&&(!H.hasFocus||H.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!T.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e;
}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},T.pseudos.nth=T.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[x]=s(x);for(x in{submit:!0,reset:!0})T.pseudos[x]=u(x);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,E=t.tokenize=function(e,n){var r,i,o,a,s,u,l,c=I[e+" "];if(c)return n?0:c.slice(0);for(s=e,u=[],l=T.preFilter;s;){r&&!(i=le.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=ce.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ue," ")}),s=s.slice(r.length));for(a in T.filter)(i=he[a].exec(s))&&(!l[a]||(i=l[a](i)))&&(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):I(e,u).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=E(e)),n=t.length;n--;)o=y(t[n]),o[B]?r.push(o):i.push(o);o=X(e,b(i,r)),o.selector=e}return o},S=t.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,f=!r&&E(e=l.selector||e);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===t.nodeType&&M&&T.relative[o[1].type]){if(t=(T.find.ID(a.matches[0].replace(we,Te),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=he.needsContext.test(e)?0:o.length;i--&&(a=o[i],!T.relative[s=a.type]);)if((u=T.find[s])&&(r=u(a.matches[0].replace(we,Te),be.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&d(o),!e)return K.apply(n,r),n;break}}return(l||k(e,f))(r,t,!M,n,be.test(e)&&c(t.parentNode)||t),n},w.sortStable=B.split("").sort(U).join("")===B,w.detectDuplicates=!!j,D(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(H.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),(!w.attributes||!i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))&&o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(a);ce.find=me,ce.expr=me.selectors,ce.expr[":"]=ce.expr.pseudos,ce.unique=me.uniqueSort,ce.text=me.getText,ce.isXMLDoc=me.isXML,ce.contains=me.contains;var ge=ce.expr.match.needsContext,ve=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ye=/^.[^:#\[\.,]*$/;ce.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ce.find.matchesSelector(r,e)?[r]:[]:ce.find.matches(e,ce.grep(t,function(e){return 1===e.nodeType}))},ce.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(ce(e).filter(function(){for(t=0;t<i;t++)if(ce.contains(r[t],this))return!0}));for(t=0;t<i;t++)ce.find(e,r[t],n);return n=this.pushStack(i>1?ce.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(l(this,e||[],!1))},not:function(e){return this.pushStack(l(this,e||[],!0))},is:function(e){return!!l(this,"string"==typeof e&&ge.test(e)?ce(e):e||[],!1).length}});var be,xe=a.document,we=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,Te=ce.fn.init=function(e,t){var n,r;if(!e)return this;if("string"==typeof e){if(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:we.exec(e),n&&(n[1]||!t)){if(n[1]){if(t=t instanceof ce?t[0]:t,ce.merge(this,ce.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:xe,!0)),ve.test(n[1])&&ce.isPlainObject(t))for(n in t)ce.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if(r=xe.getElementById(n[2]),r&&r.parentNode){if(r.id!==n[2])return be.find(e);this.length=1,this[0]=r}return this.context=xe,this.selector=e,this}return!t||t.jquery?(t||be).find(e):this.constructor(t).find(e)}return e.nodeType?(this.context=this[0]=e,this.length=1,this):ce.isFunction(e)?"undefined"!=typeof be.ready?be.ready(e):e(ce):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),ce.makeArray(e,this))};Te.prototype=ce.fn,be=ce(xe);var Ce=/^(?:parents|prev(?:Until|All))/,Ne={children:!0,contents:!0,next:!0,prev:!0};ce.extend({dir:function(e,t,n){for(var r=[],i=e[t];i&&9!==i.nodeType&&(void 0===n||1!==i.nodeType||!ce(i).is(n));)1===i.nodeType&&r.push(i),i=i[t];return r},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),ce.fn.extend({has:function(e){var t,n=ce(e,this),r=n.length;return this.filter(function(){for(t=0;t<r;t++)if(ce.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=ge.test(e)||"string"!=typeof e?ce(e,t||this.context):0;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ce.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?ce.unique(o):o)},index:function(e){return e?"string"==typeof e?ce.inArray(this[0],ce(e)):ce.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ce.unique(ce.merge(this.get(),ce(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ce.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return ce.dir(e,"parentNode")},parentsUntil:function(e,t,n){return ce.dir(e,"parentNode",n)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return ce.dir(e,"nextSibling")},prevAll:function(e){return ce.dir(e,"previousSibling")},nextUntil:function(e,t,n){return ce.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return ce.dir(e,"previousSibling",n)},siblings:function(e){return ce.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return ce.sibling(e.firstChild)},contents:function(e){return ce.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:ce.merge([],e.childNodes)}},function(e,t){ce.fn[e]=function(n,r){var i=ce.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=ce.filter(r,i)),this.length>1&&(Ne[e]||(i=ce.unique(i)),Ce.test(e)&&(i=i.reverse())),this.pushStack(i)}});var Ee=/\S+/g,ke={};ce.Callbacks=function(e){e="string"==typeof e?ke[e]||f(e):ce.extend({},e);var t,n,r,i,o,a,s=[],u=!e.once&&[],l=function d(l){for(n=e.memory&&l,r=!0,o=a||0,a=0,i=s.length,t=!0;s&&o<i;o++)if(s[o].apply(l[0],l[1])===!1&&e.stopOnFalse){n=!1;break}t=!1,s&&(u?u.length&&d(u.shift()):n?s=[]:c.disable())},c={add:function(){if(s){var r=s.length;!function o(t){ce.each(t,function(t,n){var r=ce.type(n);"function"===r?(!e.unique||!c.has(n))&&s.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),t?i=s.length:n&&(a=r,l(n))}return this},remove:function(){return s&&ce.each(arguments,function(e,n){for(var r;(r=ce.inArray(n,s,r))>-1;)s.splice(r,1),t&&(r<=i&&i--,r<=o&&o--)}),this},has:function(e){return e?ce.inArray(e,s)>-1:!!s&&!!s.length},empty:function(){return s=[],i=0,this},disable:function(){return s=u=n=void 0,this},disabled:function(){return!s},lock:function(){return u=void 0,n||c.disable(),this},locked:function(){return!u},fireWith:function(e,n){return s&&(!r||u)&&(n=n||[],n=[e,n.slice?n.slice():n],t?u.push(n):l(n)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},ce.extend({Deferred:function(e){var t=[["resolve","done",ce.Callbacks("once memory"),"resolved"],["reject","fail",ce.Callbacks("once memory"),"rejected"],["notify","progress",ce.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return ce.Deferred(function(n){ce.each(t,function(t,o){var a=ce.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&ce.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?ce.extend(e,r):r}},i={};return r.pipe=r.then,ce.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=te.call(arguments),a=o.length,s=1!==a||e&&ce.isFunction(e.promise)?a:0,u=1===s?e:ce.Deferred(),l=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?te.call(arguments):i,r===t?u.notifyWith(n,r):--s||u.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);i<a;i++)o[i]&&ce.isFunction(o[i].promise)?o[i].promise().done(l(i,r,o)).fail(u.reject).progress(l(i,n,t)):--s;return s||u.resolveWith(r,o),u.promise()}});var Se;ce.fn.ready=function(e){return ce.ready.promise().done(e),this},ce.extend({isReady:!1,readyWait:1,holdReady:function(e){e?ce.readyWait++:ce.ready(!0)},ready:function(e){if(e===!0?!--ce.readyWait:!ce.isReady){if(!xe.body)return setTimeout(ce.ready);ce.isReady=!0,e!==!0&&--ce.readyWait>0||(Se.resolveWith(xe,[ce]),ce.fn.triggerHandler&&(ce(xe).triggerHandler("ready"),ce(xe).off("ready")))}}}),ce.ready.promise=function(e){if(!Se)if(Se=ce.Deferred(),"complete"===xe.readyState)setTimeout(ce.ready);else if(xe.addEventListener)xe.addEventListener("DOMContentLoaded",p,!1),a.addEventListener("load",p,!1);else{xe.attachEvent("onreadystatechange",p),a.attachEvent("onload",p);var t=!1;try{t=null==a.frameElement&&xe.documentElement}catch(n){}t&&t.doScroll&&function r(){if(!ce.isReady){try{t.doScroll("left")}catch(e){return setTimeout(r,50)}d(),ce.ready()}}()}return Se.promise(e)};var Ae,Le="undefined";for(Ae in ce(ue))break;ue.ownLast="0"!==Ae,ue.inlineBlockNeedsLayout=!1,ce(function(){var e,t,n,r;n=xe.getElementsByTagName("body")[0],n&&n.style&&(t=xe.createElement("div"),r=xe.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),o(t.style.zoom)!==Le&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",ue.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=xe.createElement("div");if(null==ue.deleteExpando){ue.deleteExpando=!0;try{delete e.test}catch(t){ue.deleteExpando=!1}}e=null}(),ce.acceptData=function(e){var t=ce.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)};var je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,De=/([A-Z])/g;ce.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?ce.cache[e[ce.expando]]:e[ce.expando],!!e&&!m(e)},data:function(e,t,n){return g(e,t,n)},removeData:function(e,t){return v(e,t)},_data:function(e,t,n){return g(e,t,n,!0)},_removeData:function(e,t){return v(e,t,!0)}}),ce.fn.extend({data:function(e,t){var n,r,i,a=this[0],s=a&&a.attributes;if(void 0===e){if(this.length&&(i=ce.data(a),1===a.nodeType&&!ce._data(a,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=ce.camelCase(r.slice(5)),h(a,r,i[r])));ce._data(a,"parsedAttrs",!0)}return i}return"object"==("undefined"==typeof e?"undefined":o(e))?this.each(function(){ce.data(this,e)}):arguments.length>1?this.each(function(){ce.data(this,e,t)}):a?h(a,e,ce.data(a,e)):void 0},removeData:function(e){return this.each(function(){ce.removeData(this,e)})}}),ce.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=ce._data(e,t),n&&(!r||ce.isArray(n)?r=ce._data(e,t,ce.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ce.queue(e,t),r=n.length,i=n.shift(),o=ce._queueHooks(e,t),a=function(){ce.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ce._data(e,n)||ce._data(e,n,{empty:ce.Callbacks("once memory").add(function(){ce._removeData(e,t+"queue"),ce._removeData(e,n)})})}}),ce.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ce.queue(this[0],e):void 0===t?this:this.each(function(){var n=ce.queue(this,e,t);ce._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ce.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ce.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=ce.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=ce._data(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var He=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,_e=["Top","Right","Bottom","Left"],Me=function(e,t){return e=t||e,"none"===ce.css(e,"display")||!ce.contains(e.ownerDocument,e)},qe=ce.access=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===ce.type(n)){i=!0;for(s in n)ce.access(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,ce.isFunction(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(ce(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},Oe=/^(?:checkbox|radio)$/i;!function(){var e=xe.createElement("input"),t=xe.createElement("div"),n=xe.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ue.leadingWhitespace=3===t.firstChild.nodeType,ue.tbody=!t.getElementsByTagName("tbody").length,ue.htmlSerialize=!!t.getElementsByTagName("link").length,ue.html5Clone="<:nav></:nav>"!==xe.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),ue.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",ue.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",ue.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){ue.noCloneEvent=!1}),t.cloneNode(!0).click()),null==ue.deleteExpando){ue.deleteExpando=!0;try{delete t.test}catch(r){ue.deleteExpando=!1}}}(),function(){var e,t,n=xe.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})t="on"+e,(ue[e+"Bubbles"]=t in a)||(n.setAttribute(t,"t"),ue[e+"Bubbles"]=n.attributes[t].expando===!1);n=null}();var Fe=/^(?:input|select|textarea)$/i,Re=/^key/,Be=/^(?:mouse|pointer|contextmenu)|click/,Pe=/^(?:focusinfocus|focusoutblur)$/,$e=/^([^.]*)(?:\.(.+)|)$/;ce.event={global:{},add:function(e,t,n,r,i){var a,s,u,l,c,f,d,p,h,m,g,v=ce._data(e);if(v){for(n.handler&&(l=n,n=l.handler,i=l.selector),n.guid||(n.guid=ce.guid++),(s=v.events)||(s=v.events={}),(f=v.handle)||(f=v.handle=function(e){return("undefined"==typeof ce?"undefined":o(ce))===Le||e&&ce.event.triggered===e.type?void 0:ce.event.dispatch.apply(f.elem,arguments)},f.elem=e),t=(t||"").match(Ee)||[""],u=t.length;u--;)a=$e.exec(t[u])||[],h=g=a[1],m=(a[2]||"").split(".").sort(),h&&(c=ce.event.special[h]||{},h=(i?c.delegateType:c.bindType)||h,c=ce.event.special[h]||{},d=ce.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&ce.expr.match.needsContext.test(i),namespace:m.join(".")},l),(p=s[h])||(p=s[h]=[],p.delegateCount=0,c.setup&&c.setup.call(e,r,m,f)!==!1||(e.addEventListener?e.addEventListener(h,f,!1):e.attachEvent&&e.attachEvent("on"+h,f))),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,d):p.push(d),ce.event.global[h]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,m,g=ce.hasData(e)&&ce._data(e);if(g&&(c=g.events)){for(t=(t||"").match(Ee)||[""],l=t.length;l--;)if(s=$e.exec(t[l])||[],p=m=s[1],h=(s[2]||"").split(".").sort(),p){for(f=ce.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=c[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=d.length;o--;)a=d[o],(i||m===a.origType)&&(!n||n.guid===a.guid)&&(!s||s.test(a.namespace))&&(!r||r===a.selector||"**"===r&&a.selector)&&(d.splice(o,1),a.selector&&d.delegateCount--,f.remove&&f.remove.call(e,a));u&&!d.length&&((!f.teardown||f.teardown.call(e,h,g.handle)===!1)&&ce.removeEvent(e,p,g.handle),delete c[p])}else for(p in c)ce.event.remove(e,p+t[l],n,r,!0);ce.isEmptyObject(c)&&(delete g.handle,ce._removeData(e,"events"))}},trigger:function(e,t,n,r){var i,s,u,l,c,f,d,p=[n||xe],h=se.call(e,"type")?e.type:e,m=se.call(e,"namespace")?e.namespace.split("."):[];if(u=f=n=n||xe,3!==n.nodeType&&8!==n.nodeType&&!Pe.test(h+ce.event.triggered)&&(h.indexOf(".")>=0&&(m=h.split("."),h=m.shift(),m.sort()),s=h.indexOf(":")<0&&"on"+h,e=e[ce.expando]?e:new ce.Event(h,"object"==("undefined"==typeof e?"undefined":o(e))&&e),e.isTrigger=r?2:3,e.namespace=m.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:ce.makeArray(t,[e]),c=ce.event.special[h]||{},r||!c.trigger||c.trigger.apply(n,t)!==!1)){if(!r&&!c.noBubble&&!ce.isWindow(n)){for(l=c.delegateType||h,Pe.test(l+h)||(u=u.parentNode);u;u=u.parentNode)p.push(u),f=u;f===(n.ownerDocument||xe)&&p.push(f.defaultView||f.parentWindow||a)}for(d=0;(u=p[d++])&&!e.isPropagationStopped();)e.type=d>1?l:c.bindType||h,i=(ce._data(u,"events")||{})[e.type]&&ce._data(u,"handle"),i&&i.apply(u,t),i=s&&u[s],i&&i.apply&&ce.acceptData(u)&&(e.result=i.apply(u,t),e.result===!1&&e.preventDefault());if(e.type=h,!r&&!e.isDefaultPrevented()&&(!c._default||c._default.apply(p.pop(),t)===!1)&&ce.acceptData(n)&&s&&n[h]&&!ce.isWindow(n)){f=n[s],f&&(n[s]=null),ce.event.triggered=h;try{n[h]()}catch(g){}ce.event.triggered=void 0,f&&(n[s]=f)}return e.result}},dispatch:function(e){e=ce.event.fix(e);var t,n,r,i,o,a=[],s=te.call(arguments),u=(ce._data(this,"events")||{})[e.type]||[],l=ce.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(a=ce.event.handlers.call(this,e,u),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,o=0;(r=i.handlers[o++])&&!e.isImmediatePropagationStopped();)e.namespace_re&&!e.namespace_re.test(r.namespace)||(e.handleObj=r,e.data=r.data,n=((ce.event.special[r.origType]||{}).handle||r.handler).apply(i.elem,s),void 0!==n&&(e.result=n)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&(!e.button||"click"!==e.type))for(;u!=this;u=u.parentNode||this)if(1===u.nodeType&&(u.disabled!==!0||"click"!==e.type)){for(i=[],o=0;o<s;o++)r=t[o],n=r.selector+" ",void 0===i[n]&&(i[n]=r.needsContext?ce(n,this).index(u)>=0:ce.find(n,this,null,[u]).length),i[n]&&i.push(r);i.length&&a.push({elem:u,handlers:i})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[ce.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Be.test(i)?this.mouseHooks:Re.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new ce.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||xe),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||xe,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),!e.which&&void 0!==o&&(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(ce.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return ce.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=ce.extend(new ce.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?ce.event.trigger(i,null,t):ce.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},ce.removeEvent=xe.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var r="on"+t;e.detachEvent&&(o(e[r])===Le&&(e[r]=null),e.detachEvent(r,n))},ce.Event=function(e,t){return this instanceof ce.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?y:b):this.type=e,t&&ce.extend(this,t),this.timeStamp=e&&e.timeStamp||ce.now(),this[ce.expando]=!0,void 0):new ce.Event(e,t)},ce.Event.prototype={isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=y,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=y,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=y,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},ce.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ce.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||ce.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ue.submitBubbles||(ce.event.special.submit={setup:function(){return!ce.nodeName(this,"form")&&void ce.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=ce.nodeName(t,"input")||ce.nodeName(t,"button")?t.form:void 0;n&&!ce._data(n,"submitBubbles")&&(ce.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),ce._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&ce.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){return!ce.nodeName(this,"form")&&void ce.event.remove(this,"._submit")}}),ue.changeBubbles||(ce.event.special.change={setup:function(){return Fe.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(ce.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),ce.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),ce.event.simulate("change",this,e,!0)})),!1):void ce.event.add(this,"beforeactivate._change",function(e){var t=e.target;Fe.test(t.nodeName)&&!ce._data(t,"changeBubbles")&&(ce.event.add(t,"change._change",function(e){this.parentNode&&!e.isSimulated&&!e.isTrigger&&ce.event.simulate("change",this.parentNode,e,!0)}),ce._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return ce.event.remove(this,"._change"),!Fe.test(this.nodeName)}}),ue.focusinBubbles||ce.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ce.event.simulate(t,e.target,ce.event.fix(e),!0)};ce.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=ce._data(r,t);i||r.addEventListener(e,n,!0),ce._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=ce._data(r,t)-1;i?ce._data(r,t,i):(r.removeEventListener(e,n,!0),ce._removeData(r,t))}}}),ce.fn.extend({on:function(e,t,n,r,i){var a,s;if("object"==("undefined"==typeof e?"undefined":o(e))){"string"!=typeof t&&(n=n||t,t=void 0);for(a in e)this.on(a,t,n,e[a],i);return this}if(null==n&&null==r?(r=t,n=t=void 0):null==r&&("string"==typeof t?(r=n,n=void 0):(r=n,n=t,t=void 0)),r===!1)r=b;else if(!r)return this;return 1===i&&(s=r,r=function(e){return ce().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=ce.guid++)),this.each(function(){ce.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ce(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==("undefined"==typeof e?"undefined":o(e))){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=b),this.each(function(){ce.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){ce.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ce.event.trigger(e,t,n,!0)}});var We="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ze=/ jQuery\d+="(?:null|\d+)"/g,Ie=new RegExp("<(?:"+We+")[\\s/>]","i"),Xe=/^\s+/,Ue=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ve=/<([\w:]+)/,Je=/<tbody/i,Ye=/<|&#?\w+;/,Ge=/<(?:script|style|link)/i,Qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ke=/^$|\/(?:java|ecma)script/i,Ze=/^true\/(.*)/,et=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,tt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:ue.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},nt=w(xe),rt=nt.appendChild(xe.createElement("div"));tt.optgroup=tt.option,tt.tbody=tt.tfoot=tt.colgroup=tt.caption=tt.thead,tt.th=tt.td,ce.extend({clone:function(e,t,n){var r,i,o,a,s,u=ce.contains(e.ownerDocument,e);if(ue.html5Clone||ce.isXMLDoc(e)||!Ie.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(rt.innerHTML=e.outerHTML,rt.removeChild(o=rt.firstChild)),!(ue.noCloneEvent&&ue.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ce.isXMLDoc(e)))for(r=T(o),s=T(e),a=0;null!=(i=s[a]);++a)r[a]&&L(i,r[a]);if(t)if(n)for(s=s||T(e),r=r||T(o),a=0;null!=(i=s[a]);a++)A(i,r[a]);else A(e,o);return r=T(o,"script"),r.length>0&&S(r,!u&&T(e,"script")),r=s=i=null,o},buildFragment:function(e,t,n,r){for(var i,o,a,s,u,l,c,f=e.length,d=w(t),p=[],h=0;h<f;h++)if(o=e[h],o||0===o)if("object"===ce.type(o))ce.merge(p,o.nodeType?[o]:o);else if(Ye.test(o)){for(s=s||d.appendChild(t.createElement("div")),u=(Ve.exec(o)||["",""])[1].toLowerCase(),c=tt[u]||tt._default,s.innerHTML=c[1]+o.replace(Ue,"<$1></$2>")+c[2],i=c[0];i--;)s=s.lastChild;if(!ue.leadingWhitespace&&Xe.test(o)&&p.push(t.createTextNode(Xe.exec(o)[0])),!ue.tbody)for(o="table"!==u||Je.test(o)?"<table>"!==c[1]||Je.test(o)?0:s:s.firstChild,i=o&&o.childNodes.length;i--;)ce.nodeName(l=o.childNodes[i],"tbody")&&!l.childNodes.length&&o.removeChild(l);for(ce.merge(p,s.childNodes),s.textContent="";s.firstChild;)s.removeChild(s.firstChild);s=d.lastChild}else p.push(t.createTextNode(o));for(s&&d.removeChild(s),ue.appendChecked||ce.grep(T(p,"input"),C),h=0;o=p[h++];)if((!r||ce.inArray(o,r)===-1)&&(a=ce.contains(o.ownerDocument,o),s=T(d.appendChild(o),"script"),a&&S(s),n))for(i=0;o=s[i++];)Ke.test(o.type||"")&&n.push(o);return s=null,d},cleanData:function(e,t){for(var n,r,i,a,s=0,u=ce.expando,l=ce.cache,c=ue.deleteExpando,f=ce.event.special;null!=(n=e[s]);s++)if((t||ce.acceptData(n))&&(i=n[u],a=i&&l[i])){if(a.events)for(r in a.events)f[r]?ce.event.remove(n,r):ce.removeEvent(n,r,a.handle);l[i]&&(delete l[i],c?delete n[u]:o(n.removeAttribute)!==Le?n.removeAttribute(u):n[u]=null,ee.push(i))}}}),ce.fn.extend({text:function(e){return qe(this,function(e){return void 0===e?ce.text(this):this.empty().append((this[0]&&this[0].ownerDocument||xe).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=N(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=N(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,r=e?ce.filter(e,this):this,i=0;null!=(n=r[i]);i++)!t&&1===n.nodeType&&ce.cleanData(T(n)),n.parentNode&&(t&&ce.contains(n.ownerDocument,n)&&S(T(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&ce.cleanData(T(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&ce.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ce.clone(this,e,t)})},html:function(e){return qe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(ze,""):void 0;if("string"==typeof e&&!Ge.test(e)&&(ue.htmlSerialize||!Ie.test(e))&&(ue.leadingWhitespace||!Xe.test(e))&&!tt[(Ve.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(Ue,"<$1></$2>");try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(ce.cleanData(T(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=arguments[0];return this.domManip(arguments,function(t){e=this.parentNode,ce.cleanData(T(this)),e&&e.replaceChild(t,this)}),e&&(e.length||e.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t){e=ne.apply([],e);var n,r,i,o,a,s,u=0,l=this.length,c=this,f=l-1,d=e[0],p=ce.isFunction(d);if(p||l>1&&"string"==typeof d&&!ue.checkClone&&Qe.test(d))return this.each(function(n){var r=c.eq(n);p&&(e[0]=d.call(this,n,r.html())),r.domManip(e,t)});if(l&&(s=ce.buildFragment(e,this[0].ownerDocument,!1,this),n=s.firstChild,1===s.childNodes.length&&(s=n),n)){for(o=ce.map(T(s,"script"),E),i=o.length;u<l;u++)r=s,u!==f&&(r=ce.clone(r,!0,!0),i&&ce.merge(o,T(r,"script"))),t.call(this[u],r,u);if(i)for(a=o[o.length-1].ownerDocument,ce.map(o,k),u=0;u<i;u++)r=o[u],Ke.test(r.type||"")&&!ce._data(r,"globalEval")&&ce.contains(a,r)&&(r.src?ce._evalUrl&&ce._evalUrl(r.src):ce.globalEval((r.text||r.textContent||r.innerHTML||"").replace(et,"")));s=n=null}return this}}),ce.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ce.fn[e]=function(e){for(var n,r=0,i=[],o=ce(e),a=o.length-1;r<=a;r++)n=r===a?this:this.clone(!0),ce(o[r])[t](n),re.apply(i,n.get());return this.pushStack(i)}});var it,ot={};!function(){var e;ue.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=xe.getElementsByTagName("body")[0],n&&n.style?(t=xe.createElement("div"),r=xe.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",
n.appendChild(r).appendChild(t),o(t.style.zoom)!==Le&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(xe.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var at,st,ut=/^margin/,lt=new RegExp("^("+He+")(?!px)[a-z%]+$","i"),ct=/^(top|right|bottom|left)$/;a.getComputedStyle?(at=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):a.getComputedStyle(e,null)},st=function(e,t,n){var r,i,o,a,s=e.style;return n=n||at(e),a=n?n.getPropertyValue(t)||n[t]:void 0,n&&(""===a&&!ce.contains(e.ownerDocument,e)&&(a=ce.style(e,t)),lt.test(a)&&ut.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0===a?a:a+""}):xe.documentElement.currentStyle&&(at=function(e){return e.currentStyle},st=function(e,t,n){var r,i,o,a,s=e.style;return n=n||at(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),lt.test(a)&&!ct.test(t)&&(r=s.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=r,o&&(i.left=o)),void 0===a?a:a+""||"auto"}),function(){function e(){var e,t,n,r;t=xe.getElementsByTagName("body")[0],t&&t.style&&(e=xe.createElement("div"),n=xe.createElement("div"),n.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),e.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",i=o=!1,u=!0,a.getComputedStyle&&(i="1%"!==(a.getComputedStyle(e,null)||{}).top,o="4px"===(a.getComputedStyle(e,null)||{width:"4px"}).width,r=e.appendChild(xe.createElement("div")),r.style.cssText=e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",e.style.width="1px",u=!parseFloat((a.getComputedStyle(r,null)||{}).marginRight),e.removeChild(r)),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=e.getElementsByTagName("td"),r[0].style.cssText="margin:0;border:0;padding:0;display:none",s=0===r[0].offsetHeight,s&&(r[0].style.display="",r[1].style.display="none",s=0===r[0].offsetHeight),t.removeChild(n))}var t,n,r,i,o,s,u;t=xe.createElement("div"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=r&&r.style,n&&(n.cssText="float:left;opacity:.5",ue.opacity="0.5"===n.opacity,ue.cssFloat=!!n.cssFloat,t.style.backgroundClip="content-box",t.cloneNode(!0).style.backgroundClip="",ue.clearCloneStyle="content-box"===t.style.backgroundClip,ue.boxSizing=""===n.boxSizing||""===n.MozBoxSizing||""===n.WebkitBoxSizing,ce.extend(ue,{reliableHiddenOffsets:function(){return null==s&&e(),s},boxSizingReliable:function(){return null==o&&e(),o},pixelPosition:function(){return null==i&&e(),i},reliableMarginRight:function(){return null==u&&e(),u}}))}(),ce.swap=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};var ft=/alpha\([^)]*\)/i,dt=/opacity\s*=\s*([^)]*)/,pt=/^(none|table(?!-c[ea]).+)/,ht=new RegExp("^("+He+")(.*)$","i"),mt=new RegExp("^([+-])=("+He+")","i"),gt={position:"absolute",visibility:"hidden",display:"block"},vt={letterSpacing:"0",fontWeight:"400"},yt=["Webkit","O","Moz","ms"];ce.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=st(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":ue.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,s,u=ce.camelCase(t),l=e.style;if(t=ce.cssProps[u]||(ce.cssProps[u]=_(l,u)),s=ce.cssHooks[t]||ce.cssHooks[u],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:l[t];if(a="undefined"==typeof n?"undefined":o(n),"string"===a&&(i=mt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(ce.css(e,t)),a="number"),null!=n&&n===n&&("number"===a&&!ce.cssNumber[u]&&(n+="px"),!ue.clearCloneStyle&&""===n&&0===t.indexOf("background")&&(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,r)))))try{l[t]=n}catch(c){}}},css:function(e,t,n,r){var i,o,a,s=ce.camelCase(t);return t=ce.cssProps[s]||(ce.cssProps[s]=_(e.style,s)),a=ce.cssHooks[t]||ce.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=st(e,t,r)),"normal"===o&&t in vt&&(o=vt[t]),""===n||n?(i=parseFloat(o),n===!0||ce.isNumeric(i)?i||0:o):o}}),ce.each(["height","width"],function(e,t){ce.cssHooks[t]={get:function(e,n,r){if(n)return pt.test(ce.css(e,"display"))&&0===e.offsetWidth?ce.swap(e,gt,function(){return F(e,t,r)}):F(e,t,r)},set:function(e,n,r){var i=r&&at(e);return q(e,n,r?O(e,t,r,ue.boxSizing&&"border-box"===ce.css(e,"boxSizing",!1,i),i):0)}}}),ue.opacity||(ce.cssHooks.opacity={get:function(e,t){return dt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=ce.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===ce.trim(o.replace(ft,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=ft.test(o)?o.replace(ft,i):o+" "+i)}}),ce.cssHooks.marginRight=H(ue.reliableMarginRight,function(e,t){if(t)return ce.swap(e,{display:"inline-block"},st,[e,"marginRight"])}),ce.each({margin:"",padding:"",border:"Width"},function(e,t){ce.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+_e[r]+t]=o[r]||o[r-2]||o[0];return i}},ut.test(e)||(ce.cssHooks[e+t].set=q)}),ce.fn.extend({css:function(e,t){return qe(this,function(e,t,n){var r,i,o={},a=0;if(ce.isArray(t)){for(r=at(e),i=t.length;a<i;a++)o[t[a]]=ce.css(e,t[a],!1,r);return o}return void 0!==n?ce.style(e,t,n):ce.css(e,t)},e,t,arguments.length>1)},show:function(){return M(this,!0)},hide:function(){return M(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Me(this)?ce(this).show():ce(this).hide()})}}),ce.Tween=R,R.prototype={constructor:R,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||"swing",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(ce.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=ce.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=ce.css(e.elem,e.prop,""),t&&"auto"!==t?t:0):e.elem[e.prop]},set:function(e){ce.fx.step[e.prop]?ce.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[ce.cssProps[e.prop]]||ce.cssHooks[e.prop])?ce.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ce.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},ce.fx=R.prototype.init,ce.fx.step={};var bt,xt,wt=/^(?:toggle|show|hide)$/,Tt=new RegExp("^(?:([+-])=|)("+He+")([a-z%]*)$","i"),Ct=/queueHooks$/,Nt=[W],Et={"*":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tt.exec(t),o=i&&i[3]||(ce.cssNumber[e]?"":"px"),a=(ce.cssNumber[e]||"px"!==o&&+r)&&Tt.exec(ce.css(n.elem,e)),s=1,u=20;if(a&&a[3]!==o){o=o||a[3],i=i||[],a=+r||1;do s=s||".5",a/=s,ce.style(n.elem,e,a+o);while(s!==(s=n.cur()/r)&&1!==s&&--u)}return i&&(a=n.start=+a||+r||0,n.unit=o,n.end=i[1]?a+(i[1]+1)*i[2]:+i[2]),n}]};ce.Animation=ce.extend(I,{tweener:function(e,t){ce.isFunction(e)?(t=e,e=["*"]):e=e.split(" ");for(var n,r=0,i=e.length;r<i;r++)n=e[r],Et[n]=Et[n]||[],Et[n].unshift(t)},prefilter:function(e,t){t?Nt.unshift(e):Nt.push(e)}}),ce.speed=function(e,t,n){var r=e&&"object"==("undefined"==typeof e?"undefined":o(e))?ce.extend({},e):{complete:n||!n&&t||ce.isFunction(e)&&e,duration:e,easing:n&&t||t&&!ce.isFunction(t)&&t};return r.duration=ce.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in ce.fx.speeds?ce.fx.speeds[r.duration]:ce.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){ce.isFunction(r.old)&&r.old.call(this),r.queue&&ce.dequeue(this,r.queue)},r},ce.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Me).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=ce.isEmptyObject(e),o=ce.speed(t,n,r),a=function(){var t=I(this,ce.extend({},e),o);(i||ce._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=ce.timers,a=ce._data(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&Ct.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem===this&&(null==e||o[i].queue===e)&&(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&ce.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=ce._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=ce.timers,a=r?r.length:0;for(n.finish=!0,ce.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ce.each(["toggle","show","hide"],function(e,t){var n=ce.fn[t];ce.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,r,i)}}),ce.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ce.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ce.timers=[],ce.fx.tick=function(){var e,t=ce.timers,n=0;for(bt=ce.now();n<t.length;n++)e=t[n],!e()&&t[n]===e&&t.splice(n--,1);t.length||ce.fx.stop(),bt=void 0},ce.fx.timer=function(e){ce.timers.push(e),e()?ce.fx.start():ce.timers.pop()},ce.fx.interval=13,ce.fx.start=function(){xt||(xt=setInterval(ce.fx.tick,ce.fx.interval))},ce.fx.stop=function(){clearInterval(xt),xt=null},ce.fx.speeds={slow:600,fast:200,_default:400},ce.fn.delay=function(e,t){return e=ce.fx?ce.fx.speeds[e]||e:e,t=t||"fx",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},function(){var e,t,n,r,i;t=xe.createElement("div"),t.setAttribute("className","t"),t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=t.getElementsByTagName("a")[0],n=xe.createElement("select"),i=n.appendChild(xe.createElement("option")),e=t.getElementsByTagName("input")[0],r.style.cssText="top:1px",ue.getSetAttribute="t"!==t.className,ue.style=/top/.test(r.getAttribute("style")),ue.hrefNormalized="/a"===r.getAttribute("href"),ue.checkOn=!!e.value,ue.optSelected=i.selected,ue.enctype=!!xe.createElement("form").enctype,n.disabled=!0,ue.optDisabled=!i.disabled,e=xe.createElement("input"),e.setAttribute("value",""),ue.input=""===e.getAttribute("value"),e.value="t",e.setAttribute("type","radio"),ue.radioValue="t"===e.value}();var kt=/\r/g;ce.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=ce.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,ce(this).val()):e,null==i?i="":"number"==typeof i?i+="":ce.isArray(i)&&(i=ce.map(i,function(e){return null==e?"":e+""})),t=ce.valHooks[this.type]||ce.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=ce.valHooks[i.type]||ce.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(kt,""):null==n?"":n)}}}),ce.extend({valHooks:{option:{get:function(e){var t=ce.find.attr(e,"value");return null!=t?t:ce.trim(ce.text(e))}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||i<0,a=o?null:[],s=o?i+1:r.length,u=i<0?s:o?i:0;u<s;u++)if(n=r[u],(n.selected||u===i)&&(ue.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!ce.nodeName(n.parentNode,"optgroup"))){if(t=ce(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=ce.makeArray(t),a=i.length;a--;)if(r=i[a],ce.inArray(ce.valHooks.option.get(r),o)>=0)try{r.selected=n=!0}catch(s){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),ce.each(["radio","checkbox"],function(){ce.valHooks[this]={set:function(e,t){if(ce.isArray(t))return e.checked=ce.inArray(ce(e).val(),t)>=0}},ue.checkOn||(ce.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var St,At,Lt=ce.expr.attrHandle,jt=/^(?:checked|selected)$/i,Dt=ue.getSetAttribute,Ht=ue.input;ce.fn.extend({attr:function(e,t){return qe(this,ce.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ce.removeAttr(this,e)})}}),ce.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return o(e.getAttribute)===Le?ce.prop(e,t,n):(1===a&&ce.isXMLDoc(e)||(t=t.toLowerCase(),r=ce.attrHooks[t]||(ce.expr.match.bool.test(t)?At:St)),void 0===n?r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=ce.find.attr(e,t),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):void ce.removeAttr(e,t))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(Ee);if(o&&1===e.nodeType)for(;n=o[i++];)r=ce.propFix[n]||n,ce.expr.match.bool.test(n)?Ht&&Dt||!jt.test(n)?e[r]=!1:e[ce.camelCase("default-"+n)]=e[r]=!1:ce.attr(e,n,""),e.removeAttribute(Dt?n:r)},attrHooks:{type:{set:function(e,t){if(!ue.radioValue&&"radio"===t&&ce.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),At={set:function(e,t,n){return t===!1?ce.removeAttr(e,n):Ht&&Dt||!jt.test(n)?e.setAttribute(!Dt&&ce.propFix[n]||n,n):e[ce.camelCase("default-"+n)]=e[n]=!0,n}},ce.each(ce.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Lt[t]||ce.find.attr;Lt[t]=Ht&&Dt||!jt.test(t)?function(e,t,r){var i,o;return r||(o=Lt[t],Lt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,Lt[t]=o),i}:function(e,t,n){if(!n)return e[ce.camelCase("default-"+t)]?t.toLowerCase():null}}),Ht&&Dt||(ce.attrHooks.value={set:function(e,t,n){return ce.nodeName(e,"input")?void(e.defaultValue=t):St&&St.set(e,t,n)}}),Dt||(St={set:function(e,t,n){var r=e.getAttributeNode(n);if(r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n))return t}},Lt.id=Lt.name=Lt.coords=function(e,t,n){var r;if(!n)return(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},ce.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:St.set},ce.attrHooks.contenteditable={set:function(e,t,n){St.set(e,""!==t&&t,n)}},ce.each(["width","height"],function(e,t){ce.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),ue.style||(ce.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var _t=/^(?:input|select|textarea|button|object)$/i,Mt=/^(?:a|area)$/i;ce.fn.extend({prop:function(e,t){return qe(this,ce.prop,e,t,arguments.length>1)},removeProp:function(e){return e=ce.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),ce.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(e,t,n){var r,i,o,a=e.nodeType;if(e&&3!==a&&8!==a&&2!==a)return o=1!==a||!ce.isXMLDoc(e),o&&(t=ce.propFix[t]||t,i=ce.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ce.find.attr(e,"tabindex");return t?parseInt(t,10):_t.test(e.nodeName)||Mt.test(e.nodeName)&&e.href?0:-1}}}}),ue.hrefNormalized||ce.each(["href","src"],function(e,t){ce.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),ue.optSelected||(ce.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),ce.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ce.propFix[this.toLowerCase()]=this}),ue.enctype||(ce.propFix.enctype="encoding");var qt=/[\t\r\n\f]/g;ce.fn.extend({addClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,l="string"==typeof e&&e;if(ce.isFunction(e))return this.each(function(t){ce(this).addClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(Ee)||[];s<u;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(qt," "):" ")){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a=ce.trim(r),n.className!==a&&(n.className=a)}return this},removeClass:function(e){var t,n,r,i,o,a,s=0,u=this.length,l=0===arguments.length||"string"==typeof e&&e;if(ce.isFunction(e))return this.each(function(t){ce(this).removeClass(e.call(this,t,this.className))});if(l)for(t=(e||"").match(Ee)||[];s<u;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(qt," "):"")){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");a=e?ce.trim(r):"",n.className!==a&&(n.className=a)}return this},toggleClass:function(e,t){var n="undefined"==typeof e?"undefined":o(e);return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):ce.isFunction(e)?this.each(function(n){ce(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if("string"===n)for(var t,r=0,i=ce(this),o=e.match(Ee)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else n!==Le&&"boolean"!==n||(this.className&&ce._data(this,"__className__",this.className),this.className=this.className||e===!1?"":ce._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,r=this.length;n<r;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(qt," ").indexOf(t)>=0)return!0;return!1}}),ce.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){ce.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ce.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var Ot=ce.now(),Ft=/\?/,Rt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;ce.parseJSON=function(e){if(a.JSON&&a.JSON.parse)return a.JSON.parse(e+"");var t,n=null,r=ce.trim(e+"");return r&&!ce.trim(r.replace(Rt,function(e,r,i,o){return t&&r&&(n=0),0===n?e:(t=i||r,n+=!o-!i,"")}))?Function("return "+r)():ce.error("Invalid JSON: "+e)},ce.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{a.DOMParser?(n=new DOMParser,t=n.parseFromString(e,"text/xml")):(t=new ActiveXObject("Microsoft.XMLDOM"),t.async="false",t.loadXML(e))}catch(r){t=void 0}return(!t||!t.documentElement||t.getElementsByTagName("parsererror").length)&&ce.error("Invalid XML: "+e),t};var Bt,Pt,$t=/#.*$/,Wt=/([?&])_=[^&]*/,zt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Xt=/^(?:GET|HEAD)$/,Ut=/^\/\//,Vt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Jt={},Yt={},Gt="*/".concat("*");try{Pt=location.href}catch(Qt){Pt=xe.createElement("a"),Pt.href="",Pt=Pt.href}Bt=Vt.exec(Pt.toLowerCase())||[],ce.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Pt,type:"GET",isLocal:It.test(Bt[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Gt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ce.parseJSON,"text xml":ce.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?V(V(e,ce.ajaxSettings),t):V(ce.ajaxSettings,e)},ajaxPrefilter:X(Jt),ajaxTransport:X(Yt),ajax:function(e,t){function n(e,t,n,r){var i,o,f,y,b,w=t;2!==x&&(x=2,u&&clearTimeout(u),c=void 0,s=r||"",T.readyState=e>0?4:0,i=e>=200&&e<300||304===e,n&&(y=J(d,T,n)),y=Y(d,y,T,i),i?(d.ifModified&&(b=T.getResponseHeader("Last-Modified"),b&&(ce.lastModified[a]=b),b=T.getResponseHeader("etag"),b&&(ce.etag[a]=b)),204===e||"HEAD"===d.type?w="nocontent":304===e?w="notmodified":(w=y.state,o=y.data,f=y.error,i=!f)):(f=w,!e&&w||(w="error",e<0&&(e=0))),T.status=e,T.statusText=(t||w)+"",i?m.resolveWith(p,[o,w,T]):m.rejectWith(p,[T,w,f]),T.statusCode(v),v=void 0,l&&h.trigger(i?"ajaxSuccess":"ajaxError",[T,d,i?o:f]),g.fireWith(p,[T,w]),l&&(h.trigger("ajaxComplete",[T,d]),--ce.active||ce.event.trigger("ajaxStop")))}"object"==("undefined"==typeof e?"undefined":o(e))&&(t=e,e=void 0),t=t||{};var r,i,a,s,u,l,c,f,d=ce.ajaxSetup({},t),p=d.context||d,h=d.context&&(p.nodeType||p.jquery)?ce(p):ce.event,m=ce.Deferred(),g=ce.Callbacks("once memory"),v=d.statusCode||{},y={},b={},x=0,w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!f)for(f={};t=zt.exec(s);)f[t[1].toLowerCase()]=t[2];t=f[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=b[n]=b[n]||e,y[e]=t),this},overrideMimeType:function(e){return x||(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)v[t]=[v[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||w;return c&&c.abort(t),n(0,t),this}};if(m.promise(T).complete=g.add,T.success=T.done,T.error=T.fail,d.url=((e||d.url||Pt)+"").replace($t,"").replace(Ut,Bt[1]+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=ce.trim(d.dataType||"*").toLowerCase().match(Ee)||[""],null==d.crossDomain&&(r=Vt.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]===Bt[1]&&r[2]===Bt[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(Bt[3]||("http:"===Bt[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=ce.param(d.data,d.traditional)),U(Jt,d,t,T),2===x)return T;l=ce.event&&d.global,l&&0===ce.active++&&ce.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Xt.test(d.type),a=d.url,d.hasContent||(d.data&&(a=d.url+=(Ft.test(a)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Wt.test(a)?a.replace(Wt,"$1_="+Ot++):a+(Ft.test(a)?"&":"?")+"_="+Ot++)),d.ifModified&&(ce.lastModified[a]&&T.setRequestHeader("If-Modified-Since",ce.lastModified[a]),ce.etag[a]&&T.setRequestHeader("If-None-Match",ce.etag[a])),(d.data&&d.hasContent&&d.contentType!==!1||t.contentType)&&T.setRequestHeader("Content-Type",d.contentType),T.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Gt+"; q=0.01":""):d.accepts["*"]);for(i in d.headers)T.setRequestHeader(i,d.headers[i]);if(!d.beforeSend||d.beforeSend.call(p,T,d)!==!1&&2!==x){w="abort";for(i in{success:1,error:1,complete:1})T[i](d[i]);if(c=U(Yt,d,t,T)){T.readyState=1,l&&h.trigger("ajaxSend",[T,d]),d.async&&d.timeout>0&&(u=setTimeout(function(){T.abort("timeout")},d.timeout));try{x=1,c.send(y,n)}catch(C){if(!(x<2))throw C;n(-1,C)}}else n(-1,"No Transport");return T}return T.abort()},getJSON:function(e,t,n){return ce.get(e,t,n,"json")},getScript:function(e,t){return ce.get(e,void 0,t,"script")}}),ce.each(["get","post"],function(e,t){ce[t]=function(e,n,r,i){return ce.isFunction(n)&&(i=i||r,r=n,n=void 0),ce.ajax({url:e,type:t,dataType:i,data:n,success:r})}}),ce._evalUrl=function(e){return ce.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},ce.fn.extend({wrapAll:function(e){if(ce.isFunction(e))return this.each(function(t){ce(this).wrapAll(e.call(this,t))});if(this[0]){var t=ce(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return ce.isFunction(e)?this.each(function(t){ce(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ce(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=ce.isFunction(e);return this.each(function(n){ce(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){ce.nodeName(this,"body")||ce(this).replaceWith(this.childNodes)}).end()}}),ce.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!ue.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||ce.css(e,"display"))},ce.expr.filters.visible=function(e){return!ce.expr.filters.hidden(e)};var Kt=/%20/g,Zt=/\[\]$/,en=/\r?\n/g,tn=/^(?:submit|button|image|reset|file)$/i,nn=/^(?:input|select|textarea|keygen)/i;ce.param=function(e,t){var n,r=[],i=function(e,t){t=ce.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=ce.ajaxSettings&&ce.ajaxSettings.traditional),ce.isArray(e)||e.jquery&&!ce.isPlainObject(e))ce.each(e,function(){i(this.name,this.value)});else for(n in e)G(n,e[n],t,i);return r.join("&").replace(Kt,"+")},ce.fn.extend({serialize:function(){return ce.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ce.prop(this,"elements");return e?ce.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ce(this).is(":disabled")&&nn.test(this.nodeName)&&!tn.test(e)&&(this.checked||!Oe.test(e))}).map(function(e,t){var n=ce(this).val();return null==n?null:ce.isArray(n)?ce.map(n,function(e){return{name:t.name,value:e.replace(en,"\r\n")}}):{name:t.name,value:n.replace(en,"\r\n")}}).get()}}),ce.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Q()||K()}:Q;var rn=0,on={},an=ce.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var e in on)on[e](void 0,!0)}),ue.cors=!!an&&"withCredentials"in an,an=ue.ajax=!!an,an&&ce.ajaxTransport(function(e){if(!e.crossDomain||ue.cors){var t;return{send:function(n,r){var i,o=e.xhr(),a=++rn;if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)o[i]=e.xhrFields[i];e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),!e.crossDomain&&!n["X-Requested-With"]&&(n["X-Requested-With"]="XMLHttpRequest");for(i in n)void 0!==n[i]&&o.setRequestHeader(i,n[i]+"");o.send(e.hasContent&&e.data||null),t=function(n,i){var s,u,l;if(t&&(i||4===o.readyState))if(delete on[a],t=void 0,o.onreadystatechange=ce.noop,i)4!==o.readyState&&o.abort();else{l={},s=o.status,"string"==typeof o.responseText&&(l.text=o.responseText);try{u=o.statusText}catch(c){u=""}s||!e.isLocal||e.crossDomain?1223===s&&(s=204):s=l.text?200:404}l&&r(s,u,l,o.getAllResponseHeaders())},e.async?4===o.readyState?setTimeout(t):o.onreadystatechange=on[a]=t:t()},abort:function(){t&&t(void 0,!0)}}}}),ce.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return ce.globalEval(e),e}}}),ce.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),ce.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=xe.head||ce("head")[0]||xe.documentElement;return{send:function(r,i){t=xe.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var sn=[],un=/(=)\?(?=&|$)|\?\?/;ce.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=sn.pop()||ce.expando+"_"+Ot++;return this[e]=!0,e}}),ce.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,s=e.jsonp!==!1&&(un.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&un.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=ce.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(un,"$1"+r):e.jsonp!==!1&&(e.url+=(Ft.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||ce.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=a[r],a[r]=function(){o=arguments},n.always(function(){a[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,sn.push(r)),o&&ce.isFunction(i)&&i(o[0]),o=i=void 0}),"script"}),ce.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||xe;var r=ve.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=ce.buildFragment([e],t,i),i&&i.length&&ce(i).remove(),ce.merge([],r.childNodes))};var ln=ce.fn.load;ce.fn.load=function(e,t,n){if("string"!=typeof e&&ln)return ln.apply(this,arguments);var r,i,a,s=this,u=e.indexOf(" ");return u>=0&&(r=ce.trim(e.slice(u,e.length)),e=e.slice(0,u)),ce.isFunction(t)?(n=t,t=void 0):t&&"object"==("undefined"==typeof t?"undefined":o(t))&&(a="POST"),s.length>0&&ce.ajax({url:e,type:a,dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?ce("<div>").append(ce.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,i||[e.responseText,t,e])}),this},ce.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ce.fn[t]=function(e){return this.on(t,e)}}),ce.expr.filters.animated=function(e){return ce.grep(ce.timers,function(t){return e===t.elem}).length};var cn=a.document.documentElement;ce.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=ce.css(e,"position"),f=ce(e),d={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=ce.css(e,"top"),u=ce.css(e,"left"),l=("absolute"===c||"fixed"===c)&&ce.inArray("auto",[o,u])>-1,l?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),ce.isFunction(t)&&(t=t.call(e,n,s)),null!=t.top&&(d.top=t.top-s.top+a),null!=t.left&&(d.left=t.left-s.left+i),"using"in t?t.using.call(e,d):f.css(d)}},ce.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ce.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],a=i&&i.ownerDocument;if(a)return t=a.documentElement,ce.contains(t,i)?(o(i.getBoundingClientRect)!==Le&&(r=i.getBoundingClientRect()),n=Z(a),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===ce.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),ce.nodeName(e[0],"html")||(n=e.offset()),n.top+=ce.css(e[0],"borderTopWidth",!0),n.left+=ce.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-ce.css(r,"marginTop",!0),left:t.left-n.left-ce.css(r,"marginLeft",!0)
}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||cn;e&&!ce.nodeName(e,"html")&&"static"===ce.css(e,"position");)e=e.offsetParent;return e||cn})}}),ce.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);ce.fn[e]=function(r){return qe(this,function(e,r,i){var o=Z(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?ce(o).scrollLeft():i,n?i:ce(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),ce.each(["top","left"],function(e,t){ce.cssHooks[t]=H(ue.pixelPosition,function(e,n){if(n)return n=st(e,t),lt.test(n)?ce(e).position()[t]+"px":n})}),ce.each({Height:"height",Width:"width"},function(e,t){ce.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ce.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return qe(this,function(t,n,r){var i;return ce.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?ce.css(t,n,a):ce.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),ce.fn.size=function(){return this.length},ce.fn.andSelf=ce.fn.addBack,n(3)&&(r=[],i=function(){return ce}.apply(t,r),!(void 0!==i&&(e.exports=i)));var fn=a.jQuery,dn=a.$;return ce.noConflict=function(e){return a.$===ce&&(a.$=dn),e&&a.jQuery===ce&&(a.jQuery=fn),ce},("undefined"==typeof s?"undefined":o(s))===Le&&(a.jQuery=a.$=ce),ce})}).call(t,n(2)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(t,{})},function(e,t){},,function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1])}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=p[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(l(r.parts[o],t))}else{for(var a=[],o=0;o<r.parts.length;o++)a.push(l(r.parts[o],t));p[r.id]={id:r.id,refs:1,parts:a}}}}function i(e){for(var t=[],n={},r=0;r<e.length;r++){var i=e[r],o=i[0],a=i[1],s=i[2],u=i[3],l={css:a,media:s,sourceMap:u};n[o]?n[o].parts.push(l):t.push(n[o]={id:o,parts:[l]})}return t}function o(e,t){var n=g(),r=b[b.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),b.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");n.appendChild(t)}}function a(e){e.parentNode.removeChild(e);var t=b.indexOf(e);t>=0&&b.splice(t,1)}function s(e){var t=document.createElement("style");return t.type="text/css",o(e,t),t}function u(e){var t=document.createElement("link");return t.rel="stylesheet",o(e,t),t}function l(e,t){var n,r,i;if(t.singleton){var o=y++;n=v||(v=s(t)),r=c.bind(null,n,o,!1),i=c.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=u(t),r=d.bind(null,n),i=function(){a(n),n.href&&URL.revokeObjectURL(n.href)}):(n=s(t),r=f.bind(null,n),i=function(){a(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}function c(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function d(e,t){var n=t.css,r=t.sourceMap;r&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var i=new Blob([n],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(i),o&&URL.revokeObjectURL(o)}var p={},h=function(e){var t;return function(){return"undefined"==typeof t&&(t=e.apply(this,arguments)),t}},m=h(function(){return/msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),g=h(function(){return document.head||document.getElementsByTagName("head")[0]}),v=null,y=0,b=[];e.exports=function(e,t){if("object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},"undefined"==typeof t.singleton&&(t.singleton=m()),"undefined"==typeof t.insertAt&&(t.insertAt="bottom");var n=i(e);return r(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var s=n[a],u=p[s.id];u.refs--,o.push(u)}if(e){var l=i(e);r(l,t)}for(var a=0;a<o.length;a++){var u=o[a];if(0===u.refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete p[u.id]}}}};var x=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}()},function(e,t,n){var r;!function(){"use strict";function i(e,t,n){return("string"==typeof t?t:t.toString()).replace(e.define||l,function(t,r,i,o){return 0===r.indexOf("def.")&&(r=r.substring(4)),r in n||(":"===i?(e.defineParams&&o.replace(e.defineParams,function(e,t,i){n[r]={arg:t,text:i}}),r in n||(n[r]=o)):new Function("def","def['"+r+"']="+o)(n)),""}).replace(e.use||l,function(t,r){e.useParams&&(r=r.replace(e.useParams,function(e,t,r,i){if(n[r]&&n[r].arg&&i){var o=(r+":"+i).replace(/'|\\/g,"_");return n.__exp=n.__exp||{},n.__exp[o]=n[r].text.replace(new RegExp("(^|[^\\w$])"+n[r].arg+"([^\\w$])","g"),"$1"+i+"$2"),t+"def.__exp['"+o+"']"}}));var o=new Function("def","return "+r)(n);return o?i(e,o,n):o})}function o(e){return e.replace(/\\('|\\)/g,"$1").replace(/[\r\t\n]/g," ")}var a,s={version:"1.0.3",templateSettings:{evaluate:/\{\{([\s\S]+?(\}?)+)\}\}/g,interpolate:/\{\{=([\s\S]+?)\}\}/g,encode:/\{\{!([\s\S]+?)\}\}/g,use:/\{\{#([\s\S]+?)\}\}/g,useParams:/(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,define:/\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,defineParams:/^\s*([\w$]+):([\s\S]+)/,conditional:/\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,iterate:/\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,varname:"it",strip:!0,append:!0,selfcontained:!1,doNotSkipEncoded:!1},template:void 0,compile:void 0};s.encodeHTMLSource=function(e){var t={"&":"&#38;","<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","/":"&#47;"},n=e?/[&<>"'\/]/g:/&(?!#?\w+;)|<|>|"|'|\//g;return function(e){return e?e.toString().replace(n,function(e){return t[e]||e}):""}},a=function(){return this||(0,eval)("this")}(),"undefined"!=typeof e&&e.exports?e.exports=s:(r=function(){return s}.call(t,n,t,e),!(void 0!==r&&(e.exports=r)));var u={append:{start:"'+(",end:")+'",startencode:"'+encodeHTML("},split:{start:"';out+=(",end:");out+='",startencode:"';out+=encodeHTML("}},l=/$^/;s.template=function(e,t,n){t=t||s.templateSettings;var r,c,f=t.append?u.append:u.split,d=0,p=t.use||t.define?i(t,e,n||{}):e;p=("var out='"+(t.strip?p.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""):p).replace(/'|\\/g,"\\$&").replace(t.interpolate||l,function(e,t){return f.start+o(t)+f.end}).replace(t.encode||l,function(e,t){return r=!0,f.startencode+o(t)+f.end}).replace(t.conditional||l,function(e,t,n){return t?n?"';}else if("+o(n)+"){out+='":"';}else{out+='":n?"';if("+o(n)+"){out+='":"';}out+='"}).replace(t.iterate||l,function(e,t,n,r){return t?(d+=1,c=r||"i"+d,t=o(t),"';var arr"+d+"="+t+";if(arr"+d+"){var "+n+","+c+"=-1,l"+d+"=arr"+d+".length-1;while("+c+"<l"+d+"){"+n+"=arr"+d+"["+c+"+=1];out+='"):"';} } out+='"}).replace(t.evaluate||l,function(e,t){return"';"+o(t)+"out+='"})+"';return out;").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/(\s|;|\}|^|\{)out\+='';/g,"$1").replace(/\+''/g,""),r&&(t.selfcontained||!a||a._encodeHTML||(a._encodeHTML=s.encodeHTMLSource(t.doNotSkipEncoded)),p="var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : ("+s.encodeHTMLSource.toString()+"("+(t.doNotSkipEncoded||"")+"));"+p);try{return new Function(t.varname,p)}catch(h){throw"undefined"!=typeof console&&console.log("Could not create a template function: "+p),h}},s.compile=function(e,t){return s.template(e,null,t)}}()},function(e,t,n){(function(t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();n(10);var o=n(8),a=function(){function e(t){r(this,e),this.title=t}return i(e,[{key:"ini",value:function(){var e=n(12),r=o.template(e),i=r({title:this.title});t("body").append(i)}}]),e}();e.exports=a}).call(t,n(1))},function(e,t){},,function(e,t){"use strict";var n='<div class="banner">{{=it.title}}</div>';e.exports=n},function(e,t,n){(function(t){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(8),a=(n(14),n(16),n(17)),s=function(){function e(t){r(this,e),this.detail=t}return i(e,[{key:"ini",value:function(){var e=n(16),r=o.template(e),i=r({detail:a.detail});t("body").append(i)}}]),e}();e.exports=s}).call(t,n(1))},function(e,t){},,function(e,t){"use strict";var n='<div class="content"><a href="/views/result/index.html">{{=it.detail}}</a></div>';e.exports=n},function(e,t){"use strict";var n={detail:"我是内容"};e.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,